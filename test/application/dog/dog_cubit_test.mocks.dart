// Mocks generated by Mockito 5.0.0 from annotations
// in learning_app/test/application/dog/dog_cubit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:learning_app/data/datasources/dog/dog_data_source.dart' as _i2;
import 'package:learning_app/domain/core/error/failures.dart' as _i6;
import 'package:learning_app/domain/core/utils/extension_checker.dart' as _i8;
import 'package:learning_app/domain/entities/dog.dart' as _i7;
import 'package:learning_app/domain/repositories/dog/dog_repository.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeDogDataSource extends _i1.Fake implements _i2.DogDataSource {}

class _FakeEither<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [DogRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDogRepository extends _i1.Mock implements _i4.DogRepository {
  MockDogRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DogDataSource get dataSource =>
      (super.noSuchMethod(Invocation.getter(#dataSource),
          returnValue: _FakeDogDataSource()) as _i2.DogDataSource);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Dog>> getRandomDog() =>
      (super.noSuchMethod(Invocation.method(#getRandomDog, []),
              returnValue: Future.value(_FakeEither<_i6.Failure, _i7.Dog>()))
          as _i5.Future<_i3.Either<_i6.Failure, _i7.Dog>>);
}

/// A class which mocks [ExtensionChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockExtensionChecker extends _i1.Mock implements _i8.ExtensionChecker {
  MockExtensionChecker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i8.Type> check(String? url) =>
      (super.noSuchMethod(Invocation.method(#check, [url]),
          returnValue: Future.value(_i8.Type.image)) as _i5.Future<_i8.Type>);
}
